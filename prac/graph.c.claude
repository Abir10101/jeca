#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Tree node structure
typedef struct TreeNode {
    int data;
    struct TreeNode** children;  // Array of pointers to child nodes
    int child_count;            // Number of children
    int child_capacity;         // Capacity of children array
} TreeNode;

// Tree structure
typedef struct Tree {
    TreeNode* root;
} Tree;

// Function to create a new tree node
TreeNode* create_node(int data) {
    TreeNode* node = (TreeNode*)malloc(sizeof(TreeNode));
    if (!node) {
        printf("Memory allocation failed\n");
        return NULL;
    }
    
    node->data = data;
    node->children = NULL;
    node->child_count = 0;
    node->child_capacity = 0;
    
    return node;
}

// Function to create a new tree
Tree* create_tree(int root_data) {
    Tree* tree = (Tree*)malloc(sizeof(Tree));
    if (!tree) {
        printf("Memory allocation failed\n");
        return NULL;
    }
    
    tree->root = create_node(root_data);
    if (!tree->root) {
        free(tree);
        return NULL;
    }
    
    return tree;
}

// Function to add a child to a node
int add_child(TreeNode* parent, int child_data) {
    if (!parent) return 0;
    
    // Create new child node
    TreeNode* child = create_node(child_data);
    if (!child) return 0;
    
    // Resize children array if needed
    if (parent->child_count >= parent->child_capacity) {
        int new_capacity = parent->child_capacity == 0 ? 2 : parent->child_capacity * 2;
        TreeNode** new_children = (TreeNode**)realloc(parent->children, 
                                                     new_capacity * sizeof(TreeNode*));
        if (!new_children) {
            free(child);
            return 0;
        }
        parent->children = new_children;
        parent->child_capacity = new_capacity;
    }
    
    // Add child to parent
    parent->children[parent->child_count] = child;
    parent->child_count++;
    
    return 1;
}

// Function to find a node with given data (DFS)
TreeNode* find_node(TreeNode* root, int data) {
    if (!root) return NULL;
    
    if (root->data == data) return root;
    
    // Search in all children
    for (int i = 0; i < root->child_count; i++) {
        TreeNode* found = find_node(root->children[i], data);
        if (found) return found;
    }
    
    return NULL;
}

// Function to add child to a specific parent node
int add_child_to_parent(Tree* tree, int parent_data, int child_data) {
    if (!tree || !tree->root) return 0;
    
    TreeNode* parent = find_node(tree->root, parent_data);
    if (!parent) {
        printf("Parent node with data %d not found\n", parent_data);
        return 0;
    }
    
    return add_child(parent, child_data);
}

// Function for pre-order traversal
void preorder_traversal(TreeNode* root, int depth) {
    if (!root) return;
    
    // Print indentation based on depth
    for (int i = 0; i < depth; i++) {
        printf("  ");
    }
    printf("%d\n", root->data);
    
    // Traverse all children
    for (int i = 0; i < root->child_count; i++) {
        preorder_traversal(root->children[i], depth + 1);
    }
}

// Function for post-order traversal
void postorder_traversal(TreeNode* root) {
    if (!root) return;
    
    // Traverse all children first
    for (int i = 0; i < root->child_count; i++) {
        postorder_traversal(root->children[i]);
    }
    
    // Then process current node
    printf("%d ", root->data);
}

// Function for level-order traversal (BFS)
void level_order_traversal(TreeNode* root) {
    if (!root) return;
    
    // Simple queue implementation using array
    TreeNode* queue[1000];  // Assuming max 1000 nodes
    int front = 0, rear = 0;
    
    queue[rear++] = root;
    
    while (front < rear) {
        TreeNode* current = queue[front++];
        printf("%d ", current->data);
        
        // Add all children to queue
        for (int i = 0; i < current->child_count; i++) {
            queue[rear++] = current->children[i];
        }
    }
}

// Function to calculate height of tree
int tree_height(TreeNode* root) {
    if (!root) return 0;
    
    int max_height = 0;
    for (int i = 0; i < root->child_count; i++) {
        int child_height = tree_height(root->children[i]);
        if (child_height > max_height) {
            max_height = child_height;
        }
    }
    
    return max_height + 1;
}

// Function to count total nodes
int count_nodes(TreeNode* root) {
    if (!root) return 0;
    
    int count = 1;  // Count current node
    for (int i = 0; i < root->child_count; i++) {
        count += count_nodes(root->children[i]);
    }
    
    return count;
}

// Function to count leaf nodes
int count_leaves(TreeNode* root) {
    if (!root) return 0;
    
    if (root->child_count == 0) return 1;  // Leaf node
    
    int leaf_count = 0;
    for (int i = 0; i < root->child_count; i++) {
        leaf_count += count_leaves(root->children[i]);
    }
    
    return leaf_count;
}

// Function to free tree memory
void free_tree(TreeNode* root) {
    if (!root) return;
    
    // Free all children first
    for (int i = 0; i < root->child_count; i++) {
        free_tree(root->children[i]);
    }
    
    // Free children array and node
    free(root->children);
    free(root);
}

// Function to free entire tree structure
void destroy_tree(Tree* tree) {
    if (!tree) return;
    
    free_tree(tree->root);
    free(tree);
}

// Function to print tree structure
void print_tree(Tree* tree) {
    if (!tree || !tree->root) {
        printf("Tree is empty\n");
        return;
    }
    
    printf("Tree structure:\n");
    preorder_traversal(tree->root, 0);
}

// Example usage and test function
int main() {
    // Create a tree with root value 1
    Tree* tree = create_tree(1);
    if (!tree) {
        printf("Failed to create tree\n");
        return 1;
    }
    
    // Add children to root (1)
    add_child_to_parent(tree, 1, 2);
    add_child_to_parent(tree, 1, 3);
    add_child_to_parent(tree, 1, 4);
    
    // Add children to node 2
    add_child_to_parent(tree, 2, 5);
    add_child_to_parent(tree, 2, 6);
    
    // Add children to node 3
    add_child_to_parent(tree, 3, 7);
    
    // Add children to node 4
    add_child_to_parent(tree, 4, 8);
    add_child_to_parent(tree, 4, 9);
    add_child_to_parent(tree, 4, 10);
    
    // Print tree structure
    print_tree(tree);
    
    // Demonstrate different traversals
    printf("\nPre-order traversal:\n");
    preorder_traversal(tree->root, 0);
    
    printf("\nPost-order traversal: ");
    postorder_traversal(tree->root);
    printf("\n");
    
    printf("\nLevel-order traversal: ");
    level_order_traversal(tree->root);
    printf("\n");
    
    // Print tree statistics
    printf("\nTree Statistics:\n");
    printf("Height: %d\n", tree_height(tree->root));
    printf("Total nodes: %d\n", count_nodes(tree->root));
    printf("Leaf nodes: %d\n", count_leaves(tree->root));
    
    // Test search functionality
    TreeNode* found = find_node(tree->root, 7);
    if (found) {
        printf("Node with value 7 found. Children count: %d\n", found->child_count);
    }
    
    // Clean up
    destroy_tree(tree);
    
    return 0;
}
